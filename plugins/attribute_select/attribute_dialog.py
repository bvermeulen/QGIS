# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ActiveReceiversDialog
                                 A QGIS plugin
 Shows a rectangle centered on source point
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-09-29
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Bruno Vermeulen
        email                : bruno.vermeulen@.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from enum import Enum
from datetime import datetime
from dataclasses import dataclass
from pathlib import Path
from qgis.PyQt import uic, QtWidgets
from qgis.PyQt.QtCore import pyqtSignal, QDateTime

FORM_CLASS, _ = uic.loadUiType(Path(__file__).parent / "attribute_dialog.ui")

# TODO define enum attribute choices
# TODO define dataclass of as result object
# TODO implement start and end date (apply values on changed)


class AttrChoice(Enum):
    """choices are: avg_distortion, avg_stiffness, avg_viscosity, fleet"""

    avg_distortion = 1
    avg_stiffness = 2
    avg_viscosity = 3
    elevation = 4
    fleet = 5


@dataclass
class DialogData:
    """attribute, start_date, end_date"""

    attribute: AttrChoice = AttrChoice.avg_distortion
    start_date: datetime | None = None
    end_date: datetime | None = None


class AttributeDialog(QtWidgets.QDialog, FORM_CLASS):
    result = pyqtSignal(DialogData)

    def __init__(self, parent=None):
        super(AttributeDialog, self).__init__(parent)
        self.setupUi(self)
        self.dlg_data = DialogData()
        self.attributeComboBox.currentIndexChanged.connect(self.on_attribute_change)
        self.startDateTimeEdit.dateTimeChanged.connect(self.on_start_date_change)
        self.clearButton.clicked.connect(self.on_datetime_clear)
        self.submitButton.clicked.connect(self.on_datetime_submit)
        self.start_date = None
        self.end_date = None

    def on_attribute_change(self):
        attribute = self.attributeComboBox.currentText()
        match attribute:
            case "average distortion":
                self.dlg_data.attribute = AttrChoice.avg_distortion
            case "fleet":
                self.dlg_data.attribute = AttrChoice.fleet
            case "stiffness":
                self.dlg_data.attribute = AttrChoice.avg_stiffness
            case "viscosity":
                self.dlg_data.attribute = AttrChoice.avg_viscosity
            case "elevation":
                self.dlg_data.attribute = AttrChoice.elevation
            case _:
                self.dlg_data.attribute = AttrChoice.avg_distortion

        self.dlg_data.start_date = None
        self.dlg_data.end_date = None
        self.result.emit(self.dlg_data)

    def on_start_date_change(self):
        self.start_date = self.startDateTimeEdit.dateTime()
        self.endDateTimeEdit.setDateTime(self.start_date)

    def on_datetime_clear(self):
        current_datetime = QDateTime.currentDateTime()
        self.startDateTimeEdit.setDateTime(current_datetime)
        self.dlg_data.start_date = current_datetime
        self.dlg_data.end_date = current_datetime
        self.start_date = None
        self.end_date = None
        self.result.emit(self.dlg_data)

    def on_datetime_submit(self):
        self.end_date = self.endDateTimeEdit.dateTime()
        self.dlg_data.start_date = self.start_date
        self.dlg_data.end_date = self.end_date
        self.result.emit(self.dlg_data)
        self.dlg_data.start_date = None
        self.dlg_data.end_date = None
