# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PictureSelect
                                 A QGIS plugin
 Draws rubberband and displays the pictures within the rectangle
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-09-14
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Bruno Vermeulen
        email                : bruno.vermeulen@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from pathlib import Path
from qgis.PyQt.QtCore import Qt, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

from qgis.core import (
    QgsProject,
    QgsFeatureRequest,
    QgsPointXY,
    QgsRectangle,
    QgsWkbTypes,
)
from qgis.gui import (
    QgsMapToolEmitPoint,
    QgsRubberBand,
)
from .attribute_dialog import AttrChoice, AttributeDialog

styles = {
    AttrChoice.avg_distortion: r"D:/OneDrive/Work/PDO/QGIS shared/styles/avg_distortion.qml",
    AttrChoice.avg_stiffness: r"D:/OneDrive/Work/PDO/QGIS shared/styles/avg_stiffness.qml",
    AttrChoice.avg_viscosity: r"D:/OneDrive/Work/PDO/QGIS shared/styles/avg_viscosity.qml",
    AttrChoice.fleet: r"D:/OneDrive/Work/PDO/QGIS shared/styles/fleet.qml",
}


class MapTool(QgsMapToolEmitPoint):
    def __init__(self, canvas, layer):
        self.canvas = canvas
        QgsMapToolEmitPoint.__init__(self, self.canvas)
        self.layer = layer
        self.rubberBand = QgsRubberBand(canvas)
        self.rubberBand.setColor(Qt.red)
        self.rubberBand.setFillColor(Qt.transparent)
        self.rubberBand.setWidth(1)
        self.memory_layer = None
        self.start_point = None
        self.end_point = None
        self.start_date = None
        self.end_date = None
        self.style_filename = styles[AttrChoice.avg_distortion]
        self.reset()

    def reset(self):
        self.startPoint = None
        self.endPoint = None
        self.start_date = None
        self.end_date = None
        self.isEmittingPoint = False
        self.rubberBand.reset()
        self.remove_memory_layer()
        self.canvas.refresh()

    def remove_memory_layer(self):
        try:
            QgsProject.instance().removeMapLayer(self.memory_layer)
        except Exception:
            pass

    def set_style_attribute(self, attribute):
        self.style_filename = styles.get(attribute)

    def make_selection(self, dialog_data):
        self.set_style_attribute(dialog_data.attribute)
        if (dialog_data.start_date and dialog_data.end_date) and (
            dialog_data.start_date < dialog_data.end_date
        ):
            print("select on new dates")
            self.reset()
            self.start_date = dialog_data.start_date
            self.end_date = dialog_data.end_date
            self.select_on_date(self.start_date, self.end_date)

        elif (dialog_data.start_date and dialog_data.end_date) and (
            dialog_data.start_date == dialog_data.end_date
        ):
            print("remove date plot")
            self.start_date = None
            self.end_date = None
            self.reset()

        elif (self.start_date and self.end_date) and (self.start_date < self.end_date):
            print("select on existing dates")
            self.select_on_date(self.start_date, self.end_date)

        elif self.start_point and self.end_point:
            print("select on rectangle")
            self.select_on_rectangle(self.start_point, self.end_point)
        else:
            pass

    def select_on_date(self, start_date, end_date):
        if start_date >= end_date:
            return

        self.remove_memory_layer()
        start_date_str = start_date.toString("yyyy-MM-ddThh:mm")
        end_date_str = end_date.toString("yyyy-MM-ddThh:mm")
        query_str = f"time_break between '{start_date_str}' and '{end_date_str}'"
        request = QgsFeatureRequest().setFilterFids(self.layer.allFeatureIds())
        self.memory_layer = self.layer.materialize(request)
        self.memory_layer.setSubsetString(query_str)
        self.memory_layer.loadNamedStyle(self.style_filename)
        QgsProject.instance().addMapLayer(self.memory_layer)

    def select_on_rectangle(self, start_point, end_point):
        if start_point is None or end_point is None:
            return

        elif start_point.x() == end_point.x() or start_point.y() == end_point.y():
            return

        self.remove_memory_layer()
        select_area = QgsRectangle(start_point, end_point)
        request = QgsFeatureRequest().setFilterRect(select_area)
        self.memory_layer = self.layer.materialize(request)
        self.memory_layer.loadNamedStyle(self.style_filename)
        QgsProject.instance().addMapLayer(self.memory_layer)

    def canvasPressEvent(self, e):
        self.reset()
        self.start_point = self.toMapCoordinates(e.pos())
        self.end_point = self.start_point
        self.isEmittingPoint = True
        self.show_rect(self.start_point, self.end_point)

    def canvasReleaseEvent(self, e):
        self.isEmittingPoint = False
        self.select_on_rectangle(self.start_point, self.end_point)

    def canvasMoveEvent(self, e):
        if not self.isEmittingPoint:
            return

        self.end_point = self.toMapCoordinates(e.pos())
        self.show_rect(self.start_point, self.end_point)

    def show_rect(self, start_point, end_point):
        self.rubberBand.reset(QgsWkbTypes.PolygonGeometry)
        if start_point.x() == end_point.x() or start_point.y() == end_point.y():
            return

        self.rubberBand.addPoint(QgsPointXY(start_point.x(), start_point.y()), False)
        self.rubberBand.addPoint(QgsPointXY(start_point.x(), end_point.y()), False)
        self.rubberBand.addPoint(QgsPointXY(end_point.x(), end_point.y()), False)
        self.rubberBand.addPoint(QgsPointXY(end_point.x(), start_point.y()), True)
        self.rubberBand.show()

    def deactivate(self):
        self.reset()


class AttributeSelect:
    def __init__(self, iface):
        self.iface = iface
        self.canvas = self.iface.mapCanvas()
        self.menu = self.tr("&Attribute Select")
        self.layer = None
        self.action = None
        self.map_tool = None
        self.dlg = None

    def initGui(self):
        icon_path = str(Path(__file__).parent / "icon_select_attribute.png")
        self.action = QAction(
            QIcon(icon_path), self.tr("Attribute Select"), self.iface.mainWindow()
        )
        self.action.triggered.connect(self.run)
        self.action.setEnabled(True)
        self.action.setCheckable(True)
        self.action.setStatusTip("Select attribute ...")
        self.iface.addToolBarIcon(self.action)
        self.iface.addPluginToMenu(self.menu, self.action)

    def tr(self, message):
        return QCoreApplication.translate("AttributeSelect", message)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        self.iface.removePluginMenu(self.tr("&Attribute Select"), self.action)
        self.iface.removeToolBarIcon(self.action)

    def act_on_dialog(self, dialog_data):
        self.map_tool.make_selection(dialog_data)

    def run(self):

        if self.action.isChecked():
            self.layer = self.iface.activeLayer()
            self.dlg = AttributeDialog(parent=self.iface.mainWindow())
            self.dlg.result.connect(self.act_on_dialog)
            self.dlg.show()
            self.map_tool = MapTool(self.canvas, self.layer)
            self.canvas.setMapTool(self.map_tool)

        else:
            if self.layer:
                self.map_tool.deactivate()
                self.canvas.unsetMapTool(self.map_tool)
                self.layer = None
                self.map_tool = None
                self.dlg.done(0)
                self.dlg = None
